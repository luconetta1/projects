/**********************************************************
* HW4: Binary Search Trees
* Comp 15
* README
* Author: Luca Conetta
* 3/11/20
*********************************************************/
Compile/run:
     - Compile using
            make hw4
            --or--
            make
     - run executable with
            ./hw4


Program Purpose:

This program implements a fully functioning Binary Search Tree, with all of the
invariants and functions that that implies.


Acknowledgements:
- Ellis Brown for advice on how to implement remove function.

Files:

hw4.cpp:
        Main driver file.

BinarySearchTree.cpp:
        Implementation of the BinarySearchTree class. This includes functions such as
        adding and removing values to the tree, as well as getting the min and
        max values of the tree.

BinarySearchTree.h:
        Interface of BinarySearchTree class.



Data Structures:

        The data structure used for this assignment was a binary search tree(BST).
        A BST is a node-based binary tree data structure which has the following
        properties:
            - The left subtree of a node contains only nodes with keys lesser
              than the node’s key.
            - The right subtree of a node contains only nodes with keys greater
              than the node’s key.
            - The left and right subtree each must also be a binary search tree.
        BSTs are extremely useful for keeping track of data with keys that are
        easy to keep track of, compare, and organize (ints, floats or strings).

Testing:

        The testing file that I made was heavily based on the hw4.cpp file that
        was provided in the assignment spec. I simply added a few more edge cases
        to the testing than were initially provided, specifically adding values
        to the BST and removing nodes with 2 children.

        The toughest part of this assignment for me was the implementation of
        the remove function, specifically removing nodes with 2 children and
        then re-structuring the tree accordingly. Remembering to move all of the
        instances of a node replacing a parent node was tricky but not too hard
        as well;


Note: This homework comes partially implemented, but student must also
create the driver and add class functionality.
